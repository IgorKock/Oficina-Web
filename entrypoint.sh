#!/bin/bash
set -e # Sai imediatamente se um comando falhar

# Fun√ß√£o para aguardar o MariaDB
wait_for_mariadb() {
  echo "Aguardando o MariaDB iniciar em $DB_HOST:$DB_PORT..."
  # O 'nc -z' √© usado para testar a conex√£o TCP sem enviar dados
  # Usamos um loop com timeout para robustez
  local timeout=30
  local start_time=$(date +%s)
  while ! nc -z "$DB_HOST" "$DB_PORT"; do
    current_time=$(date +%s)
    elapsed_time=$((current_time - start_time))
    if [ $elapsed_time -ge $timeout ]; then
      echo "Tempo limite excedido ao aguardar o MariaDB."
      exit 1
    fi
    echo "Ainda aguardando o MariaDB..."
    sleep 1
  done
  echo "MariaDB iniciou!"
}

# Define as vari√°veis de ambiente para o host e porta do DB
DB_HOST=${DB_HOST:-db}
DB_PORT=${DB_PORT:-3306}

# Exporta FLASK_APP para que os comandos flask db funcionem corretamente
export FLASK_APP=run.py # Confirme se o seu ficheiro principal √© 'run.py'

# Chama a fun√ß√£o para aguardar o MariaDB
wait_for_mariadb

# L√≥gica de migra√ß√£o: Inicializa migra√ß√µes se a pasta n√£o existir,
# e sempre aplica as migra√ß√µes mais recentes.
MIGRATIONS_DIR="/app/migrations"

if [ ! -f "$MIGRATIONS_DIR/env.py" ]; then
  echo "Diret√≥rio de migra√ß√µes '$MIGRATIONS_DIR' n√£o encontrado. Inicializando Flask-Migrate..."
  flask db init || { echo "Erro: 'flask db init' falhou. Saindo."; exit 1; }
  echo "Gerando migra√ß√£o inicial..."
  flask db migrate -m "Initial migration" || { echo "Erro: 'flask db migrate' falhou. Saindo."; exit 1; }
else
  echo "Diret√≥rio de migra√ß√µes '$MIGRATIONS_DIR' j√° existe."
fi

echo "Aplicando migra√ß√µes de banco de dados..."
# √â CRUCIAL que este comando seja bem-sucedido para que as tabelas sejam criadas.
flask db upgrade || { echo "--- ERRO CR√çTICO: FALHA NA APLICA√á√ÉO DE MIGRA√á√ïES ---"; exit 1; }

echo "Migra√ß√µes aplicadas com sucesso!"

# üí§ Delay m√≠nimo para garantir que o banco finalize as altera√ß√µes
sleep 2

# Inicia a aplica√ß√£o Flask (comando original do CMD)
echo "Iniciando a aplica√ß√£o Flask..."
exec "$@" # Executa o comando passado para o entrypoint (CMD do Dockerfile)