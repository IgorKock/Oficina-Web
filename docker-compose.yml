version: "3.8"

services:
  # Serviço para o banco de dados MariaDB
  db:
    image: mariadb:10.6 # Use uma versão específica do MariaDB, por exemplo 10.6 para maior compatibilidade
    restart: always # Garante que o container reinicie automaticamente
    environment:
      MYSQL_ROOT_PASSWORD: root_password # Altere esta senha para algo seguro em produção
      MYSQL_DATABASE: oficina_web # Nome do banco de dados que sua aplicação usará
      MYSQL_USER: user_app # Usuário do banco de dados para sua aplicação
      MYSQL_PASSWORD: password_app # Senha do usuário do banco de dados para sua aplicação
    volumes:
      - db_data:/var/lib/mysql # Persiste os dados do banco de dados
    healthcheck: # Configuração do healthcheck para o MariaDB
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u$$MYSQL_USER -p$$MYSQL_PASSWORD"] # Testa a conexão com o usuário e senha do app
      interval: 10s # Verifica a cada 10 segundos
      timeout: 5s # Tempo limite para a verificação
      retries: 5 # Número de tentativas antes de considerar "unhealthy"
      start_period: 30s # Período inicial para o container iniciar sem falhar o healthcheck
    networks:
      - oficina_network
    # Opcional: expõe a porta 3306 do MariaDB para o host, útil para ferramentas externas
    # ports:
    #   - "3306:3306"

  # Seu serviço da aplicação web (Flask)
  web:
    build: .
    image: igorkock/oficinaweb:latest
    container_name: oficinaweb
    ports:
      - "5000:5000"
    networks:
      - oficina_network
    # A aplicação 'web' depende do serviço 'db' e espera que ele esteja saudável
    depends_on:
      db:
        condition: service_healthy
    # O comando é agora o ENTRYPOINT definido no Dockerfile.
    # O CMD no Dockerfile será o argumento para o ENTRYPOINT.
    environment:
      # Configuração da URL do banco de dados para a sua aplicação Flask
      # O host 'db' refere-se ao nome do serviço do MariaDB definido acima
      SQLALCHEMY_DATABASE_URI: mysql+pymysql://user_app:password_app@db/oficina_web
    volumes:
      - .:/app # Monta o diretório atual do host para /app no container (seu código da aplicação)
      - migrations_data:/app/migrations # NOVO: Volume para persistir as migrações
    # Se você tiver um ENTRYPOINT no Dockerfile, não precisa de um 'command' aqui.
    # Caso contrário, o 'command' seria algo como:
    # command: bash -c "flask db upgrade && python run.py"

volumes:
  db_data:
  migrations_data: # NOVO: Definição do volume para migrações

networks:
  oficina_network:
    driver: bridge