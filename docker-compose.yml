version: "3.8"

services:
  # Serviço para o banco de dados MariaDB
  db:
    image: mariadb:10.6 # Use uma versão específica do MariaDB, por exemplo 10.6 para maior compatibilidade
    restart: always # Garante que o container reinicie automaticamente
    environment:
      MYSQL_ROOT_PASSWORD: root_password # Altere esta senha para algo seguro em produção
      MYSQL_DATABASE: oficina_web # Nome do banco de dados que sua aplicação usará
      MYSQL_USER: user_app # Usuário do banco de dados para sua aplicação
      MYSQL_PASSWORD: password_app # Senha do usuário do banco de dados para sua aplicação
    volumes:
      - db_data:/var/lib/mysql # Persiste os dados do banco de dados
    healthcheck: # Configuração do healthcheck para o MariaDB
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u$$MYSQL_USER -p$$MYSQL_PASSWORD"] # Testa a conexão com o usuário e senha do app
      interval: 10s # Verifica a cada 10 segundos
      timeout: 5s # Tempo limite para a verificação
      retries: 5 # Número de tentativas antes de considerar "unhealthy"
      start_period: 30s # Período inicial para o container iniciar sem falhar o healthcheck
    networks:
      - oficina_network
    # Opcional: expõe a porta 3306 do MariaDB para o host, útil para ferramentas externas
    # ports:
    #   - "3306:3306"

  # Seu serviço da aplicação web (Flask)
  web:
    build: .
    image: igorkock/oficinaweb:latest
    container_name: oficinaweb
    ports:
      - "5000:5000"
    networks:
      - oficina_network
    # A aplicação 'web' depende do serviço 'db' e espera que ele esteja saudável
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Passe as variáveis individuais que seu __init__.py espera
      DB_USER: user_app
      DB_PASSWORD: password_app
      DB_HOST: db # <--- ISSO É CRUCIAL: 'db' é o nome do serviço MariaDB no Docker Compose
      DB_NAME: oficina_web
      FLASK_APP: run.py # Certifique-se de que FLASK_APP está definido para as migrações
    volumes:
      - .:/app # Monta o diretório atual do host para /app no container (seu código da aplicação)
      - ./migrations:/app/migrations  # ✅ Correção aqui: agora usa a pasta local de migrações
      #- migrations_data:/app/migrations # NOVO: Volume para persistir as migrações
    # Comando para executar as migrações e iniciar a aplicação
    # O 'flask db upgrade' garante que o banco de dados esteja atualizado
    # antes da aplicação iniciar.
    command: bash -c "flask db upgrade && python run.py" # Adicionado o comando explícito

volumes:
  db_data:
  #migrations_data: # NOVO: Definição do volume para migrações

networks:
  oficina_network:
    driver: bridge # Mantido o driver explícito